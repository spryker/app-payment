openapi: 3.0.0
info:
    version: 1.0.0
    contact:
        name: Spryker
        url: 'https://spryker.com/'
        email: support@spryker.com
    title: 'Spryker Payment App API'
    license:
        name: Proprietary

servers:
    -   url: 'http://api.payment.spryker.local'
        description: 'Local glue endpoint'
    -   url: 'https://api.payment-testing.acp.demo-spryker.com/'
        description: 'Testing glue endpoint'
    -   url: 'https://api.payment-staging.acp.demo-spryker.com/'
        description: 'Staging glue endpoint'
    -   url: 'https://api.payment.acp.spryker.com/'
        description: 'Production glue endpoint'

paths:
    '/private/initialize-payment':
        post:
            x-spryker:
                module: PaymentBackendApi
                controller: InitializePaymentResourceController
            summary: 'Initializes a payment with a third party provider.'
            parameters:
                - $ref: '#/components/parameters/tenantIdentifier'
            requestBody:
                description: 'Provides Order Data (incl. orderReference) or Quote Data (excl. orderReference).'
                required: true
                content:
                    # SCOS tenants are NOT sending this as JSON, but as form data!
                    application/x-www-form-urlencoded:
                        schema:
                            $ref: '#/components/schemas/InitializePaymentRequest'
                        encoding:
                            orderData:
                                # Arrays of objects (as url-encoded form data) is not officially supported by the
                                # OpenAPI spec, as there are different standards for how this is serialized.
                                # The current format will incorrectly appear as a JSON form field in swagger, while
                                # postman will generate working examples with it.
                                # See this discussion on the OpenAPI specification on the limitations of deepObject
                                # https://github.com/OAI/OpenAPI-Specification/issues/1706
                                style: deepObject
                                explode: true
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InitializePaymentResponse'
                400:
                    description: 'Bad request.'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        text/plain:
                            schema:
                                type: string

    '/private/confirm-pre-order-payment':
        post:
            x-spryker:
                module: PaymentBackendApi
                controller: ConfirmPreOrderPaymentResourceController
            summary: 'Confirms a Pre-Order Payment (Payment Initialized without an orderReference before the order was persisted) and connects the payment with an order.'
            parameters:
                - $ref: '#/components/parameters/tenantIdentifier'
            requestBody:
                description: 'PSP data object that enables the connection between the payment that currently does not have an orderReference yet.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ConfirmPreOrderPaymentRequest'
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ConfirmPreOrderPaymentResponse'
                400:
                    description: 'Bad request.'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        text/plain:
                            schema:
                                type: string

    '/private/payments/transfers':
        post:
            x-spryker:
                module: PaymentBackendApi
                controller: PaymentsTransfersResourceController
            summary: 'Endpoint which will be used by SCOS to to transfer money to Merchants or to reverse previously made transfers.'
            parameters:
                -   $ref: '#/components/parameters/tenantIdentifier'
            requestBody:
                description: 'Provides data needed to do transfers or reverse transfers.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TransfersRequest'
            responses:
                201:
                    description: 'Response when transfers are initiated.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TransfersResponse'
                400:
                    description: 'Bad request.'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        text/plain:
                            schema:
                                type: string

components:
    schemas:
        InitializePaymentResponse:
            properties:
                isSuccessful:
                    type: boolean
                redirectUrl:
                    type: string
                    description: 'URL for payment authorization'
                message:
                    type: string
                    nullable: true
                paymentProviderData:
                    type: object
                    additionalProperties:
                        type: string
                    description: 'Key-value object with attributes that can be forwarded to the PSP implementation. https://swagger.io/docs/specification/data-models/dictionaries/'
                    example:
                        clientId: '#061280'
                        publishableKey: '#061114'

        InitializePaymentRequest:
            type: object
            required:
                - orderData
            properties:
                orderData:
                    description: 'Order data.'
                    type: object
                    required:
                        - countryCode
                        - customerFirstName
                        - customerLastName
                        - currencyCode
                        - grandTotal
                        - paymentMethod
                        - items
                    properties:
                        orderReference:
                            type: string
                            example: 'DE--123456'
                        storeName:
                            type: string
                            example: 'DE'
                        localeName:
                            type: string
                            enum:
                                - en_US
                                - de_DE
                        countryCode:
                            type: string
                            example: 'DE'
                        customerFirstName:
                            type: string
                            example: 'John'
                        customerLastName:
                            type: string
                            example: 'McClane'
                        currencyCode:
                            type: string
                            example: 'EUR'
                        grandTotal:
                            type: integer
                            example: 10000
                            description: 'Total in lowest denominator (cents)'
                        paymentMethod:
                            type: string
                            enum:
                                - 'Credit Card'
                                - 'PayPal'
                        items:
                            type: array
                            items:
                                $ref: '#/components/schemas/QuoteItem'
                            minItems: 1
                        additionalPaymentData:
                            type: object
                            additionalProperties:
                                type: string
                            description: 'Key-value object with attributes that can be forwarded to the PSP implementation. https://swagger.io/docs/specification/data-models/dictionaries/'
                            example:
                                paymentId: '#061280'
                                other: '#061114'

                redirectSuccessUrl:
                    description: 'Provides redirect success URL.'
                    type: string
                    example: 'https://example.com/success'
                redirectCancelUrl:
                    description: 'Provides redirect cancel URL.'
                    type: string
                    example: 'https://example.com/cancel'
                checkoutSummaryPageUrl:
                    description: 'Provides checkout summary page URL.'
                    type: string
                    example: 'https://example.com/summary'

        ConfirmPreOrderPaymentRequest:
            type: object
            required:
                - orderReference
                - paymentServiceProviderData
            properties:
                orderReference:
                    type: string
                    example: 'DE-123456'
                paymentServiceProviderData:
                    description: 'Key-value object with attributes that can be forwarded to the PSP implementation. https://swagger.io/docs/specification/data-models/dictionaries/'
                    type: string
                    additionalProperties:
                        type: string
                    example:
                        paymentId: '#061280'
                        other: '#061114'

        ConfirmPreOrderPaymentResponse:
            properties:
                isSuccessful:
                    type: boolean
                message:
                    description: 'Message in case of failure to know the issue on the Tenant side.'
                    type: string
                    nullable: true

        QuoteItem:
            type: object
            required:
                - idSalesOrderItem
            properties:
                idSalesOrderItem:
                    type: integer
                    example: 210
                name:
                    type: string
                    example: "Oryx Figurine"

        TransfersRequest:
            properties:
                orderItems:
                    type: array
                    items:
                        $ref: '#/components/schemas/OrderItem'
                    minItems: 1

        TransfersResponse:
            properties:
                transfers:
                    type: array
                    items:
                        $ref: '#/components/schemas/Transfer'
        Transfer:
            properties:
                merchantReference:
                    type: string
                orderReference:
                    type: string
                amount:
                    type: string
                transferId:
                    type: string
                    description: 'Will be returned to the Tenant so that he knows about the transaction ID and to use the transaction ID for a reverse payout.'
                orderItems:
                    type: array
                    items:
                        $ref: '#/components/schemas/OrderItem'
                isSuccessful:
                    type: boolean
                    description: 'Indicates if the transfer was successful or not.'
                failureMessage:
                    type: string
                    description: 'Message in case of failure to know the issue on the Tenant side.'
        OrderItem:
            properties:
                transferId:
                    type: string
                    description: 'ID of a previous made transfer, passed to make a reverse transfer.'
                merchantReference:
                    type: string
                    description: 'ID of the merchant.'
                orderReference:
                    type: string
                    description: 'ID of the sales order.'
                itemReference:
                    type: string
                    description: 'UUID of the sales order item.'
                amount:
                    type: string
                    description: 'Amount in lowest denominator (cents, YEN). When negative money has to be refunded, when positive money has to be transferred.'
                    example:
                        - '1000' # Positive number used for transfer
                        - '-1000' # Negative number used for transfer reversal
            required:
                - merchantReference
                - orderReference
                - amount
                - itemReference

    parameters:
        tenantIdentifier:
            name: X-Tenant-Identifier
            in: header
            required: true
            description: 'Reference of the Tenant.'
            schema:
                type: string
            example: dev-DE
