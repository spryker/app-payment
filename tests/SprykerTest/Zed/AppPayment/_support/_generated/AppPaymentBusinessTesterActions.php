<?php  //[STAMP] d6f187624b797bcafd6c5188c4504a20
// phpcs:ignoreFile
namespace SprykerTest\Zed\AppPayment\_generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build

trait AppPaymentBusinessTesterActions
{
    /**
     * @return \Codeception\Scenario
     */
    abstract protected function getScenario();

    
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $key
     * @param array|string|float|int|bool $value
     *
     * @return void
     * @see \SprykerTest\Shared\Testify\Helper\ConfigHelper::setConfig()
     */
    public function setConfig(string $key, $value): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('setConfig', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $key
     * @param array|string|float|int|bool $value
     *
     * @return void
     * @see \SprykerTest\Shared\Testify\Helper\ConfigHelper::mockEnvironmentConfig()
     */
    public function mockEnvironmentConfig(string $key, $value): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('mockEnvironmentConfig', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $methodName
     * @param mixed $return
     * @param string|null $moduleName
     * @param string|null $applicationName
     *
     * @throws \Exception
     *
     * @return \Spryker\Shared\Kernel\AbstractBundleConfig|null
     * @see \SprykerTest\Shared\Testify\Helper\ConfigHelper::mockConfigMethod()
     */
    public function mockConfigMethod(string $methodName, $return, ?string $moduleName = NULL, ?string $applicationName = NULL): ?\Spryker\Shared\Kernel\AbstractBundleConfig {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('mockConfigMethod', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $methodName
     * @param mixed $return
     * @param string|null $moduleName
     *
     * @throws \Exception
     *
     * @return \Spryker\Shared\Kernel\AbstractSharedConfig|null
     * @see \SprykerTest\Shared\Testify\Helper\ConfigHelper::mockSharedConfigMethod()
     */
    public function mockSharedConfigMethod(string $methodName, $return, ?string $moduleName = NULL): ?\Spryker\Shared\Kernel\AbstractSharedConfig {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('mockSharedConfigMethod', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string|null $moduleName
     *
     * @return \Spryker\Shared\Kernel\AbstractBundleConfig
     * @see \SprykerTest\Shared\Testify\Helper\ConfigHelper::getModuleConfig()
     */
    public function getModuleConfig(?string $moduleName = NULL): \Spryker\Shared\Kernel\AbstractBundleConfig {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getModuleConfig', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string|null $moduleName
     *
     * @return \Spryker\Shared\Kernel\AbstractSharedConfig|null
     * @see \SprykerTest\Shared\Testify\Helper\ConfigHelper::getSharedModuleConfig()
     */
    public function getSharedModuleConfig(?string $moduleName = NULL): ?\Spryker\Shared\Kernel\AbstractSharedConfig {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getSharedModuleConfig', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $moduleName
     *
     * @return bool
     * @see \SprykerTest\Shared\Testify\Helper\ConfigHelper::configExists()
     */
    public function configExists(string $moduleName): bool {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('configExists', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $key
     *
     * @return void
     * @see \SprykerTest\Shared\Testify\Helper\ConfigHelper::removeConfig()
     */
    public function removeConfig(string $key): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('removeConfig', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $methodName
     * @param mixed $return
     * @param string|null $moduleName
     *
     * @throws \Exception
     *
     * @return \Spryker\Zed\Kernel\Business\AbstractFacade
     * @see \SprykerTest\Zed\Testify\Helper\Business\BusinessHelper::mockFacadeMethod()
     */
    public function mockFacadeMethod(string $methodName, $return, ?string $moduleName = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('mockFacadeMethod', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string|null $moduleName
     *
     * @return \Spryker\Zed\Kernel\Business\AbstractFacade
     * @see \SprykerTest\Zed\Testify\Helper\Business\BusinessHelper::getFacade()
     */
    public function getFacade(?string $moduleName = NULL): \Spryker\Zed\Kernel\Business\AbstractFacade {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getFacade', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $methodName
     * @param mixed $return
     * @param string|null $moduleName
     *
     * @throws \Exception
     *
     * @return \Spryker\Zed\Kernel\Business\AbstractBusinessFactory|object
     * @see \SprykerTest\Zed\Testify\Helper\Business\BusinessHelper::mockFactoryMethod()
     */
    public function mockFactoryMethod(string $methodName, $return, ?string $moduleName = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('mockFactoryMethod', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $methodName
     * @param mixed $return
     * @param string|null $moduleName
     *
     * @throws \Exception
     *
     * @return \Spryker\Zed\Kernel\Business\AbstractBusinessFactory|object
     * @see \SprykerTest\Zed\Testify\Helper\Business\BusinessHelper::mockSharedFactoryMethod()
     */
    public function mockSharedFactoryMethod(string $methodName, $return, ?string $moduleName = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('mockSharedFactoryMethod', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string|null $moduleName
     *
     * @return \Spryker\Zed\Kernel\Business\AbstractBusinessFactory
     * @see \SprykerTest\Zed\Testify\Helper\Business\BusinessHelper::getFactory()
     */
    public function getFactory(?string $moduleName = NULL): \Spryker\Zed\Kernel\Business\AbstractBusinessFactory {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getFactory', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \SprykerTest\Shared\AppPayment\Helper\AppPaymentHelper::assertPaymentIsInState()
     */
    public function assertPaymentIsInState(string $transactionId, string $expectedState): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertPaymentIsInState', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \SprykerTest\Shared\AppPayment\Helper\AppPaymentHelper::havePaymentForTransactionId()
     */
    public function havePaymentForTransactionId(string $transactionId, string $tenantIdentifier, string $status = \Spryker\Zed\AppPayment\Business\Payment\Status\PaymentStatus::STATUS_NEW): \Generated\Shared\Transfer\PaymentTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('havePaymentForTransactionId', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \SprykerTest\Shared\AppPayment\Helper\AppPaymentHelper::havePayment()
     */
    public function havePayment(array $seed = []): \Generated\Shared\Transfer\PaymentTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('havePayment', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \SprykerTest\Shared\AppPayment\Helper\AppPaymentHelper::haveInitializePaymentRequestTransfer()
     */
    public function haveInitializePaymentRequestTransfer(array $seed = []): \Generated\Shared\Transfer\InitializePaymentRequestTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveInitializePaymentRequestTransfer', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * This method should only be used by the PlatformPluginInterface implementation tests.
     * It Provides a request transfer as it would come from the Payment module.
     * @see \SprykerTest\Shared\AppPayment\Helper\AppPaymentHelper::haveInitializePaymentRequestWithAppConfigTransfer()
     */
    public function haveInitializePaymentRequestWithAppConfigTransfer(array $seed = []): \Generated\Shared\Transfer\InitializePaymentRequestTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveInitializePaymentRequestWithAppConfigTransfer', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * TODO: Remove when Helukabel fix gets removed
     * @see \SprykerTest\Shared\AppPayment\Helper\AppPaymentHelper::haveInitializePaymentRequestWithAppConfigForHelukabelTransfer()
     */
    public function haveInitializePaymentRequestWithAppConfigForHelukabelTransfer(array $seed = []): \Generated\Shared\Transfer\InitializePaymentRequestTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveInitializePaymentRequestWithAppConfigForHelukabelTransfer', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \SprykerTest\Shared\AppPayment\Helper\AppPaymentHelper::havePaymentPageRequestTransfer()
     */
    public function havePaymentPageRequestTransfer(array $seed = []): \Generated\Shared\Transfer\PaymentPageRequestTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('havePaymentPageRequestTransfer', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \SprykerTest\Shared\AppPayment\Helper\AppPaymentHelper::havePaymentStatusRequestTransfer()
     */
    public function havePaymentStatusRequestTransfer(array $seed = []): \Generated\Shared\Transfer\PaymentStatusRequestTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('havePaymentStatusRequestTransfer', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \SprykerTest\Shared\AppPayment\Helper\AppPaymentHelper::haveCapturePaymentRequestTransfer()
     */
    public function haveCapturePaymentRequestTransfer(array $seed = [], $status = \Spryker\Zed\AppPayment\Business\Payment\Status\PaymentStatus::STATUS_NEW): \Generated\Shared\Transfer\CapturePaymentRequestTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveCapturePaymentRequestTransfer', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \SprykerTest\Shared\AppPayment\Helper\AppPaymentHelper::haveCancelPaymentRequestTransfer()
     */
    public function haveCancelPaymentRequestTransfer(array $seed = [], $status = \Spryker\Zed\AppPayment\Business\Payment\Status\PaymentStatus::STATUS_NEW): \Generated\Shared\Transfer\CancelPaymentRequestTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveCancelPaymentRequestTransfer', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \SprykerTest\Shared\AppPayment\Helper\AppPaymentHelper::getPaymentTransferByTransactionId()
     */
    public function getPaymentTransferByTransactionId(string $transactionId): \Generated\Shared\Transfer\PaymentTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getPaymentTransferByTransactionId', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \SprykerTest\Shared\AppPayment\Helper\AppPaymentHelper::dontSeePaymentByTenantIdentifier()
     */
    public function dontSeePaymentByTenantIdentifier(string $tenantIdentifier): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeePaymentByTenantIdentifier', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     *
     * @see \SprykerTest\Shared\AppPayment\Helper\AppPaymentHelper::dontSeePaymentByTenantIdentifier()
     */
    public function cantSeePaymentByTenantIdentifier(string $tenantIdentifier): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeePaymentByTenantIdentifier', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \SprykerTest\Shared\AppPayment\Helper\AppPaymentHelper::seePaymentByTenantIdentifier()
     */
    public function seePaymentByTenantIdentifier(string $tenantIdentifier): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seePaymentByTenantIdentifier', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     *
     * @see \SprykerTest\Shared\AppPayment\Helper\AppPaymentHelper::seePaymentByTenantIdentifier()
     */
    public function canSeePaymentByTenantIdentifier(string $tenantIdentifier): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seePaymentByTenantIdentifier', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param \Closure $closure
     *
     * @return void
     * @see \SprykerTest\Shared\Testify\Helper\DataCleanupHelper::addCleanup()
     */
    public function addCleanup(\Closure $closure): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('addCleanup', func_get_args()));
    }
}
